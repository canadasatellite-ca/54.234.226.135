# wordpress.conf
    location = /xmlrpc.php {
        return 444;
        access_log off;
        error_log off;
    }

# Deliver 404 instead of 403 "Forbidden"
    error_page 403 = 404;

# Do not allow access to files giving away your WordPress version
    location ~ /(\.|wp-config.php|readme.html|licence.txt) { return 404; }

# Add trailing slash to */wp-admin requests.
    rewrite /wp-admin$ $scheme://$host$uri/ permanent;

# Deny access to any files with a .php extension in the uploads directory
# Works in sub-directory installs and also in multisite network
    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }

# Make sure files with the following extensions do not get loaded by nginx because nginx would display the source code, and these files can contain PASSWORDS!
    location ~* \.(engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl)$|^(\..*|Entries.*|Repository|Root|Tag|Template)$|\.php_
    {
	return 444;
    }

#nocgi
    location ~* \.(pl|cgi|py|sh|lua)\$ { return 444; }

#disallow
    location ~* (roundcube|webdav|smtp|http\:|soap|w00tw00t) { return 444; }

# Запрещаем все URL-ы, в параметрах (..?a=evil) которых есть следующие вхождения
if ($query_string ~* "^(.*)(wp-config.php|dl-skin.php|xmlrpc.php|uploadify.php)(.*)$") {
  return 444;
}

if ($args ~* "(attachment_id|eval|duplicate|base64|substring|preg_replace|create_function)") {
    return 403;
}

# # Protect SQL injections
#     set $block_sql_injections 0;
#         if ($query_string ~* "(concat.*\(|union.*select.*\(|union.*all.*select)") {
#           return 444;
#         }
#         if ($block_sql_injections = 1) {return 403;}

# # Block file injections
#     set $block_file_injections 0;
#     if ($query_string ~ "[a-zA-Z0-9_]=http://") {set $block_file_injections 1;}
#     if ($query_string ~ "[a-zA-Z0-9_]=(\.\.//?)+") {set $block_file_injections 1;}
#     if ($query_string ~ "[a-zA-Z0-9_]=/([a-z0-9_.]//?)+") {set $block_file_injections 1;}
#     if ($block_file_injections = 1) {return 403;}

# # Block common exploits
#     set $block_common_exploits 0;
#     if ($query_string ~ "(<|%3C).*script.*(>|%3E)") {set $block_common_exploits 1;}
#     if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") {set $block_common_exploits 1;}
#     if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") {set $block_common_exploits 1;}
#     if ($query_string ~ "proc/self/environ") {set $block_common_exploits 1;}
#     if ($query_string ~ "mosConfig_[a-zA-Z_]{1,21}(=|\%3D)") {set $block_common_exploits 1;}
#     if ($query_string ~ "base64_(en|de)code\(.*\)") {set $block_common_exploits 1;}
#     if ($block_common_exploits = 1) {return 403;}


# # Block view 
# location = /wp-content/ {return 404;}
# location = /wp-includes/ {return 404;}
# location = /wp-content/plugins/ {return 404;}
# location = /wp-content/themes/ {return 404;}
# location = /wp-content/languages/ {return 404;}
# location = /wp-content/languages/plugins/ {return 404;}
# location = /wp-content/languages/themes/ {return 404;}
# location ~ /wp-content/languages/(.+)\.(po|mo) {return 404;}

#Yoast sitemap
    location ~ ([^/]*)sitemap(.*)\.x(m|s)l$ {
        ## this redirects sitemap.xml to /sitemap_index.xml
        rewrite ^/sitemap\.xml$ /sitemap_index.xml permanent;
        ## this makes the XML sitemaps work
        rewrite ^/([a-z]+)?-?sitemap\.xsl$ /index.php?xsl=$1 last;
        rewrite ^/sitemap_index\.xml$ /index.php?sitemap=1 last;
        rewrite ^/([^/]+?)-sitemap([0-9]+)?\.xml$ /index.php?sitemap=$1&sitemap_n=$2 last;
        ## The following lines are optional for the premium extensions
        ## News SEO
        rewrite ^/news-sitemap\.xml$ /index.php?sitemap=wpseo_news last;
        ## Local SEO
        rewrite ^/locations\.kml$ /index.php?sitemap=wpseo_local_kml last;
        rewrite ^/geo-sitemap\.xml$ /index.php?sitemap=wpseo_local last;
        ## Video SEO
        rewrite ^/video-sitemap\.xsl$ /index.php?xsl=video last;
}
